define(["./when-4bbc8319","./Matrix2-ccd5b911","./arrayRemoveDuplicates-18786327","./BoundingRectangle-2da8b04c","./Transforms-2f9313e7","./ComponentDatatype-93750d1a","./PolylineVolumeGeometryLibrary-6696728c","./RuntimeError-346a3079","./GeometryAttribute-4cca8ebf","./GeometryAttributes-7827a6c2","./GeometryPipeline-d56805c6","./IndexDatatype-b7d979a6","./PolygonPipeline-13235481","./VertexFormat-71718faa","./combine-83860057","./WebGLConstants-1c8239cc","./EllipsoidTangentPlane-53e9387a","./AxisAlignedBoundingBox-66b76991","./IntersectionTests-66bcab6d","./Plane-18bb00f8","./PolylinePipeline-18503392","./EllipsoidGeodesic-19ea7553","./EllipsoidRhumbLine-aa9e6266","./AttributeCompression-1f045b73","./EncodedCartesian3-08b8d980"],function(d,T,G,D,w,R,B,e,S,I,O,N,W,u,t,n,a,i,o,r,l,s,p,c,m){"use strict";function y(e){var t=(e=d.defaultValue(e,d.defaultValue.EMPTY_OBJECT)).polylinePositions,n=e.shapePositions,e=(this._positions=t,this._shape=n,this._ellipsoid=T.Ellipsoid.clone(d.defaultValue(e.ellipsoid,T.Ellipsoid.WGS84)),this._cornerType=d.defaultValue(e.cornerType,B.CornerType.ROUNDED),this._vertexFormat=u.VertexFormat.clone(d.defaultValue(e.vertexFormat,u.VertexFormat.DEFAULT)),this._granularity=d.defaultValue(e.granularity,R.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry",1+t.length*T.Cartesian3.packedLength);e+=1+n.length*T.Cartesian2.packedLength,this.packedLength=e+T.Ellipsoid.packedLength+u.VertexFormat.packedLength+2}y.pack=function(e,t,n){n=d.defaultValue(n,0);var a,i=e._positions,o=i.length;for(t[n++]=o,a=0;a<o;++a,n+=T.Cartesian3.packedLength)T.Cartesian3.pack(i[a],t,n);var r=e._shape,o=r.length;for(t[n++]=o,a=0;a<o;++a,n+=T.Cartesian2.packedLength)T.Cartesian2.pack(r[a],t,n);return T.Ellipsoid.pack(e._ellipsoid,t,n),n+=T.Ellipsoid.packedLength,u.VertexFormat.pack(e._vertexFormat,t,n),n+=u.VertexFormat.packedLength,t[n++]=e._cornerType,t[n]=e._granularity,t};var g=T.Ellipsoid.clone(T.Ellipsoid.UNIT_SPHERE),h=new u.VertexFormat,f={polylinePositions:void 0,shapePositions:void 0,ellipsoid:g,vertexFormat:h,cornerType:void 0,granularity:void 0},U=(y.unpack=function(e,t,n){t=d.defaultValue(t,0);for(var a=e[t++],i=new Array(a),o=0;o<a;++o,t+=T.Cartesian3.packedLength)i[o]=T.Cartesian3.unpack(e,t);var a=e[t++],r=new Array(a);for(o=0;o<a;++o,t+=T.Cartesian2.packedLength)r[o]=T.Cartesian2.unpack(e,t);var l=T.Ellipsoid.unpack(e,t,g),s=(t+=T.Ellipsoid.packedLength,u.VertexFormat.unpack(e,t,h)),p=(t+=u.VertexFormat.packedLength,e[t++]),c=e[t];return d.defined(n)?(n._positions=i,n._shape=r,n._ellipsoid=T.Ellipsoid.clone(l,n._ellipsoid),n._vertexFormat=u.VertexFormat.clone(s,n._vertexFormat),n._cornerType=p,n._granularity=c,n):(f.polylinePositions=i,f.shapePositions=r,f.cornerType=p,f.granularity=c,new y(f))},new D.BoundingRectangle);return y.createGeometry=function(e){var t=e._positions,t=G.arrayRemoveDuplicates(t,T.Cartesian3.equalsEpsilon),n=e._shape,n=B.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(n);if(!(t.length<2||n.length<3)){W.PolygonPipeline.computeWindingOrder2D(n)===W.WindingOrder.CLOCKWISE&&n.reverse();var a,i,o,r,l,s=D.BoundingRectangle.fromPoints(n,U),t=B.PolylineVolumeGeometryLibrary.computePositions(t,n,s,e,!0),p=n,n=s,s=e._vertexFormat,e=new I.GeometryAttributes,c=(s.position&&(e.position=new S.GeometryAttribute({componentDatatype:R.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:t})),p.length),d=t.length/3,u=(d-2*c)/(2*c),m=W.PolygonPipeline.triangulate(p),y=(u-1)*c*6+2*m.length,g=N.IndexDatatype.createTypedArray(d,y),h=2*c,f=0;for(V=0;V<u-1;V++){for(a=0;a<c-1;a++)l=(i=2*a+V*c*2)+h,r=(o=i+1)+h,g[f++]=o,g[f++]=i,g[f++]=r,g[f++]=r,g[f++]=i,g[f++]=l;r=(o=(i=2*c-2+V*c*2)+1)+h,l=i+h,g[f++]=o,g[f++]=i,g[f++]=r,g[f++]=r,g[f++]=i,g[f++]=l}if(s.st||s.tangent||s.bitangent){for(var b,v,P=new Float32Array(2*d),E=1/(u-1),_=1/n.height,k=n.height/2,L=0,V=0;V<u;V++){for(v=_*(p[0].y+k),P[L++]=b=V*E,P[L++]=v,a=1;a<c;a++)v=_*(p[a].y+k),P[L++]=b,P[L++]=v,P[L++]=b,P[L++]=v;v=_*(p[0].y+k),P[L++]=b,P[L++]=v}for(a=0;a<c;a++)v=_*(p[a].y+k),P[L++]=b=0,P[L++]=v;for(a=0;a<c;a++)v=_*(p[a].y+k),P[L++]=b=(u-1)*E,P[L++]=v;e.st=new S.GeometryAttribute({componentDatatype:R.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(P)})}var x=d-2*c;for(V=0;V<m.length;V+=3){var C=m[V]+x,F=m[V+1]+x,A=m[V+2]+x;g[f++]=C,g[f++]=F,g[f++]=A,g[f++]=A+c,g[f++]=F+c,g[f++]=C+c}if(y=new S.Geometry({attributes:e,indices:g,boundingSphere:w.BoundingSphere.fromVertices(t),primitiveType:S.PrimitiveType.TRIANGLES}),s.normal&&(y=O.GeometryPipeline.computeNormal(y)),s.tangent||s.bitangent){try{y=O.GeometryPipeline.computeTangentAndBitangent(y)}catch(e){B.oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}s.tangent||(y.attributes.tangent=void 0),s.bitangent||(y.attributes.bitangent=void 0),s.st||(y.attributes.st=void 0)}return y}},function(e,t){return(e=d.defined(t)?y.unpack(e,t):e)._ellipsoid=T.Ellipsoid.clone(e._ellipsoid),y.createGeometry(e)}});
